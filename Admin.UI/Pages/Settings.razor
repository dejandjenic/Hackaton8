@page "/settings"
@using Admin.UI.ApiClients
@using Admin.UI.Services
@using Shared
@using System.Net.Mime
@using Microsoft.AspNetCore.Authorization
@inject BackendApiClient api
@attribute [Authorize]
@inject IToastService toastService
@inject SettingsService settingsService
@inject KnowledgeBaseSettingsService KnowledgeBaseSettingsService

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>

<BackDrop Visible="backDropVisible"></BackDrop>

<Tabs AllowTabPageRemoval="false">
    <TabPage Text="Bot settings">
        <Loading IsLoading="@isSettingsLoading">
            <p>this settings are you when initializing bot and describing its use within the system.</p>
            <textarea rows="20" style="width:100%" @bind="botSettings.Text"/>
            <br/>
            <button class="btn-primary" @onclick="SaveBotSettings">Save changes</button>
        </Loading>
    </TabPage>
    <TabPage Text="Knowledge base">
        <div class="row">
            <Loading IsLoading="@isLoading">
                <div class="col-2">
                        <a href="javascript:void(0)" @onclick="() => { modal.Open(); }">add</a>
                        <ul class="pages">
                            @foreach (var p in pages)
                            {
                                <li><span @onclick="async () => await SelectPage(p.Id, p.Name, p.Content)">@p.Name</span></li>
                            }
                        </ul>
                    </div>
                    <div class="col-10">
                        <label>Name</label>
                        <input @bind=selectedPageName/><br/>
                        <label>Content</label>
                        <textarea @bind=selectedPageText style="width:100%" rows="20"></textarea>
                        <br/>
                        <button @onclick="SavePageContent" class="btn-primary">Save changes</button>
                    </div>
            </Loading>
        </div>
    </TabPage>

</Tabs>

<Modal @ref="modal">
    <Title>
        @GetDialogTitle()
    </Title>
    <Body>
        <p>
            <input @bind="newPageText"/>
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="SavePage">Save changes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>
    </Footer>
</Modal>

@code {
    private ChatSettings botSettings=new();
    private string newPageText;
    string selectedPageId;
    string selectedPageText;
    string selectedPageName;
    bool isLoading = false;
    bool isSettingsLoading = false;
    bool backDropVisible;

    string GetDialogTitle() => "Add new page";
    
    List<KnowledgeBasePage> pages = new();
    private Modal modal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        isLoading = true;
        isSettingsLoading = true;
        botSettings = await settingsService.GetBotSettings();
        isSettingsLoading = false;
        
        pages = await KnowledgeBaseSettingsService.GetPages();
        isLoading = false;
    }

    private async Task SaveBotSettings()
    {
        Console.WriteLine($"saving settings {botSettings}");
        backDropVisible = true;
        StateHasChanged();
        await settingsService.SaveBotSettings(botSettings);
        backDropVisible = false;
        StateHasChanged();
        toastService.ShowSuccess("settings saved");
    }

    private async Task SavePage()
    {
        Console.WriteLine("save page");
        
        backDropVisible = true;
        StateHasChanged();
        await KnowledgeBaseSettingsService.AddPage(newPageText,"");
        backDropVisible = false;
        StateHasChanged();
        
        newPageText = "";
        isLoading = true;
        pages = await KnowledgeBaseSettingsService.GetPages();
        isLoading = false;
        modal.Close();
    }

    private async Task SelectPage(string id,string name,string content)
    {
        Console.WriteLine(selectedPageId);
        Console.WriteLine(selectedPageText);
        Console.WriteLine(selectedPageName);
        selectedPageId = id;
        selectedPageName = name;
        selectedPageText = content;
        StateHasChanged();
    }

    private async Task SavePageContent()
    {
        backDropVisible = true;
        StateHasChanged();
        await api.UpdatePage(selectedPageId, selectedPageName, selectedPageText);
        backDropVisible = false;
        StateHasChanged();
        toastService.ShowSuccess("Page saved");
        isLoading = true;
        StateHasChanged();
        pages = await KnowledgeBaseSettingsService.GetPages();
        isLoading = false;
        StateHasChanged();
    }

}