@page "/chat"
@implements IDisposable
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Admin.UI.Services
@using Shared
@using Admin.UI.ApiClients
@using System.Runtime.CompilerServices
@using System.Dynamic
@inject HttpClient Http
@attribute [Authorize]
@inject ChatService chatService;
@inject BackendApiClient client;

<PageTitle>Chat</PageTitle>

@if (!string.IsNullOrWhiteSpace(status))
{
	<div>@status</div>
}
else
{
    <Tabs OnRemove="@OnRemove">
        <TabPage Text="Active chats">
            <ActiveChats UserIdsForAssistance="@needAssistants.Keys.ToList()" OnSelect="OnSelect" Chats="Chats"></ActiveChats>
        </TabPage>
        @foreach (var chat in Ids.Keys)
        {
		
            <TabPage Text=@chat Id="@chat">
                <ChatDetail IsPaused=@Chats.First(x => x.UserId == chat).IsPaused Id=@chat data="@Ids[chat].Item2"></ChatDetail>
            </TabPage>
           
        }

    </Tabs>
	@foreach(var item in needAssistants)
    {
        @if (item.Value.Item1)
        {
            <div class="alert alert-danger" role="alert">
                @item.Value.Item2
            </div>
        }
    }
   
}


@code {
    
	public Dictionary<string,(IDisposable,List<ChatUserEventMessage>)> Ids { get; set; } = new();
 
	async Task OnRemove(string id)
	{
		var handler = Ids[id].Item1;
		handler.Dispose();
		Ids.Remove(id);
		StateHasChanged();
	}

	async Task OnSelect(string id)
	{
		if (needAssistants.ContainsKey(id))
		{
		    var message = needAssistants[id].Item2;
			needAssistants[id] = (false, message);
	        StateHasChanged();
	    }

		if (!Ids.ContainsKey(id))
		{
			
			chatService.Watch(id);
			//getHistory
		    var historyMessages = await client.GetHistory(id);
			var handler = await chatService.RegisterChatEventHandler((user) =>
			{
				Console.WriteLine(user);
				if(id == user.UserId)
				{
					Ids[id].Item2.Add(user);
					StateHasChanged();
				}
			});
			
			Ids.Add(id, (handler, historyMessages));
			
			StateHasChanged();
		}
	}
	
	private List<ChatUserEvent> Chats=new();
	string status = "";
	IDisposable mainHandler;
    IDisposable assistantHandler;

    private Dictionary<string, (bool, string)> needAssistants = new();

    protected async override Task OnInitializedAsync()
	{
		NavigationManager.LocationChanged += LocationChanged;
		status = "Connecting to messenger ...";
		
		await chatService.Init();

		//get active users 
		Chats = (await client.GetActiveUsers())
	        .Select(x => new ChatUserEvent() { IsPaused = x.ChatPaused.GetValueOrDefault(false), Name = x.ChatName, UserId = x.Id }).ToList();

		status = "registering events ...";
		mainHandler = await chatService.RegisterNewChatEventHandler((user) =>
		{
			Console.WriteLine(user);
			
			if (!Chats.Select(x => x.UserId).ToList().Contains(user.UserId))
			{
				Chats.Add(user);
				StateHasChanged();
			}

            var existingUser = Chats.FirstOrDefault(x => x.UserId == user.UserId);
            if (existingUser is not null && (existingUser.Name != user.Name || existingUser.IsPaused != user.IsPaused))
            {
                Chats.Remove(existingUser);
				Chats.Add(user);
                StateHasChanged();
            }
		});

	    assistantHandler = await chatService.RegisterNeedAssistantEventHandler((userId) =>
	    {
            var warningMessage = $"Warning. User: {userId} needs your help";
            needAssistants.Add(userId, (true, warningMessage));
            StateHasChanged();
	    });
		status = "";
	}

	void LocationChanged(object sender, LocationChangedEventArgs e)
	{
		string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
		System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
	}

	void IDisposable.Dispose()
	{
	// Unsubscribe from the event when our component is disposed
		NavigationManager.LocationChanged -= LocationChanged;
		mainHandler.Dispose();
	    assistantHandler.Dispose();
		foreach (var id in Ids)
		{
			id.Value.Item1.Dispose();
		}
	}
}