@page "/chat"
@implements IDisposable
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Admin.UI.Services
@using Shared
@inject HttpClient Http
@attribute [Authorize]
@inject ChatService chatService;

<PageTitle>Chat</PageTitle>

@if (!string.IsNullOrWhiteSpace(status))
{
	<div>@status</div>
}
else
{
	<Tabs OnRemove="@OnRemove">
		<TabPage Text="Active chats">
			<ActiveChats OnSelect="OnSelect" Chats="Chats"></ActiveChats>
		</TabPage>
		@foreach (var chat in Ids.Keys)
		{
			<TabPage Text=@chat Id="@chat">
				<ChatDetail Id=@chat data="@Ids[chat].Item2"></ChatDetail>
			</TabPage>
		}

	</Tabs>
}

@code {
    
	public Dictionary<string,(IDisposable,List<ChatUserEventMessage>)> Ids { get; set; } = new();

	async Task OnRemove(string id)
	{
		var handler = Ids[id].Item1;
		handler.Dispose();
		Ids.Remove(id);
		StateHasChanged();
	}

	async Task OnSelect(string id)
	{
		if (!Ids.ContainsKey(id))
		{
			
			chatService.Watch(id);
			
			var handler = await chatService.RegisterChatEventHandler((user) =>
			{
				Console.WriteLine(user);
				if(id == user.UserId)
				{
					Ids[id].Item2.Add(user);
					StateHasChanged();
				}
			});
			
			Ids.Add(id,(handler,new List<ChatUserEventMessage>()));
			
			StateHasChanged();
		}
	}
	
	private List<ChatUserEvent> Chats=new();
	string status = "";
	IDisposable mainHandler;

	protected async override Task OnInitializedAsync()
	{
		NavigationManager.LocationChanged += LocationChanged;
		status = "Connecting to messenger ...";
		
		await chatService.Init();
		status = "registering events ...";
		mainHandler = await chatService.RegisterNewChatEventHandler((user) =>
		{
			Console.WriteLine(user);
			
			if (!Chats.Select(x => x.UserId).ToList().Contains(user.UserId))
			{
				Chats.Add(user);
				StateHasChanged();
			}
		});
		status = "";
	}

	void LocationChanged(object sender, LocationChangedEventArgs e)
	{
		string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
		System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
	}

	void IDisposable.Dispose()
	{
	// Unsubscribe from the event when our component is disposed
		NavigationManager.LocationChanged -= LocationChanged;
		mainHandler.Dispose();
		foreach (var id in Ids)
		{
			id.Value.Item1.Dispose();
		}
	}
}