@using Shared
@using System.Text.Json

@if (Visible)
{

    <div class="line-container">
        @foreach (var line in LinesWrapper)
        {
            var it = LinesWrapper.IndexOf(line);
            var id = "id" + it;
            <input @onfocus="async (e) => { await ItemOnFocus(e, it); }" @ref="@references[id]" @onkeydown="LineKeyDown" class="line" @bind="@line.Text"/>
        }
    </div>

    <button @onclick="SaveChanges">Save changes</button>

}

@code {
    int index = 0;
    Dictionary<string,ElementReference> references=new();

    [Parameter]
    public Func<(List<KnowledgeBaseLine>,List<KnowledgeBaseLine>),Task> OnSave { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public List<KnowledgeBaseLine> Lines { get; set; } = new();
    
    public List<FakeKnowledgeBaseLine> LinesWrapper { get; set; } = new();

    protected async override Task OnParametersSetAsync()
    {
        if (Lines.Count < 10)
        {
            LinesWrapper = 
                Lines.
                    Select(x => new FakeKnowledgeBaseLine(x.Text, x.PageId, x.Id, false))
                    .ToList()
                    .Union(
                        Enumerable.Range(Lines.Count,10).
                            Select(x=>new FakeKnowledgeBaseLine("","",Guid.NewGuid().ToString(),true)).
                            ToList()).
                    ToList();
        }
        else
        {
            LinesWrapper = Lines.Select(x => new FakeKnowledgeBaseLine(x.Text, x.PageId, x.Id, false)).ToList();
        }
    }

    protected async override Task OnInitializedAsync()
    {
       
    }

    private async Task LineKeyDown(KeyboardEventArgs arg)
    {
        Console.WriteLine(arg);
        //Enter
        Console.WriteLine(arg.Key);
        Console.WriteLine(arg.Code);
        if (arg.Key == "Enter")
        {
            if (index < references.Count-1)
            {
                index++;
                await references["id"+index].FocusAsync();
            }
            else
            {
                index++;
                LinesWrapper.Add(new ("","",Guid.NewGuid().ToString(),true) );
                Task.Run(async () =>
                {
                    await Task.Delay(00);
                    await references["id"+index].FocusAsync();
                });
            }
        }
    }

    private async Task ItemOnFocus(FocusEventArgs arg,int id)
    {
        Console.WriteLine(id);
        index = id;
    }

    public class FakeKnowledgeBaseLine : KnowledgeBaseLine
    {
        public bool IsFake { get; }

        public FakeKnowledgeBaseLine(string text, string pageid, string id,bool isFake) : base(text, pageid, id)
        {
            IsFake = isFake;
        }
    }

    private async Task SaveChanges(MouseEventArgs arg)
    {
        Console.WriteLine(JsonSerializer.Serialize(LinesWrapper));
        var existingLines = LinesWrapper.
            Where(x => !x.IsFake).
            Select(x=> new KnowledgeBaseLine(x.Text,x.PageId,x.Id)).
            ToList();
        var newLines = LinesWrapper.
            Where(x => x.IsFake).
            Select(x=> new KnowledgeBaseLine(x.Text,x.PageId,string.Empty)).
            ToList();;
        
        Console.WriteLine(JsonSerializer.Serialize(existingLines));
        Console.WriteLine(JsonSerializer.Serialize(newLines));
        await OnSave((existingLines, newLines));
    }

}

